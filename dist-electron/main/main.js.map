{"version":3,"file":"main.js","sources":["../../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow } from 'electron'\r\nimport { createRequire } from 'node:module'\r\nimport { fileURLToPath } from 'node:url'\r\nimport path from 'node:path'\r\n\r\nconst require = createRequire(import.meta.url)\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\r\n\r\n// The built directory structure\r\n//\r\n// â”œâ”€â”¬â”€â”¬ dist\r\n// â”‚ â”‚ â””â”€â”€ index.html\r\n// â”‚ â”‚\r\n// â”‚ â”œâ”€â”¬ dist-electron\r\n// â”‚ â”‚ â”œâ”€â”€ main.js\r\n// â”‚ â”‚ â””â”€â”€ preload.mjs\r\n// â”‚\r\nprocess.env.APP_ROOT = path.join(__dirname, '..')\r\n\r\n// ðŸš§ Use ['ENV_NAME'] avoid vite:define plugin - Vite@2.x\r\nexport const VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL']\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\r\n\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL ? path.join(process.env.APP_ROOT, 'public') : RENDERER_DIST\r\n\r\nlet win: BrowserWindow | null\r\n\r\nfunction createWindow() {\r\n  win = new BrowserWindow({\r\n    icon: path.join(process.env.VITE_PUBLIC, 'electron-vite.svg'),\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.mjs'),\r\n    },\r\n    width: 1440,\r\n    height: 900,\r\n    autoHideMenuBar: true,\r\n  })\r\n\r\n  win.setMenuBarVisibility(false);\r\n\r\n  // Test active push message to Renderer-process.\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', (new Date).toLocaleString())\r\n  })\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    win.loadURL(VITE_DEV_SERVER_URL)\r\n  } else {\r\n    // win.loadFile('dist/index.html')\r\n    win.loadFile(path.join(RENDERER_DIST, 'index.html'))\r\n  }\r\n}\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', () => {\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n    win = null\r\n  }\r\n})\r\n\r\napp.on('activate', () => {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (BrowserWindow.getAllWindows().length === 0) {\r\n    createWindow()\r\n  }\r\n})\r\n\r\napp.whenReady().then(createWindow)\r\n"],"names":[],"mappings":";;;;AAKgB,cAAc,YAAY,GAAG;AAC7C,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAW7D,QAAA,IAAY,WAAW,KAAK,KAAK,WAAW,IAAI;AAGzC,MAAM,sBAAsB,YAAY,qBAAqB;AAC7D,MAAM,YAAY,KAAK,KAAK,QAAA,IAAY,UAAU,eAAe;AACjE,MAAM,gBAAgB,KAAK,KAAK,QAAA,IAAY,UAAU,MAAM;AAEnE,QAAA,IAAY,cAAc,sBAAsB,KAAK,KAAK,QAAA,IAAY,UAAU,QAAQ,IAAI;AAE5F,IAAI;AAEJ,SAAS,eAAe;AACtB,QAAM,IAAI,cAAc;AAAA,IACtB,MAAM,KAAK,KAAK,QAAA,IAAY,aAAa,mBAAmB;AAAA,IAC5D,gBAAgB;AAAA,MACd,SAAS,KAAK,KAAK,WAAW,aAAa;AAAA,IAAA;AAAA,IAE7C,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,iBAAiB;AAAA,EAAA,CAClB;AAED,MAAI,qBAAqB,KAAK;AAG9B,MAAI,YAAY,GAAG,mBAAmB,MAAM;AAC1C,+BAAK,YAAY,KAAK,6CAA6B,KAAA,GAAM;EAC3D,CAAC;AAED,MAAI,qBAAqB;AACvB,QAAI,QAAQ,mBAAmB;AAAA,EACjC,OAAO;AAEL,QAAI,SAAS,KAAK,KAAK,eAAe,YAAY,CAAC;AAAA,EACrD;AACF;AAKA,IAAI,GAAG,qBAAqB,MAAM;AAChC,MAAI,QAAQ,aAAa,UAAU;AACjC,QAAI,KAAA;AACJ,UAAM;AAAA,EACR;AACF,CAAC;AAED,IAAI,GAAG,YAAY,MAAM;AAGvB,MAAI,cAAc,gBAAgB,WAAW,GAAG;AAC9C,iBAAA;AAAA,EACF;AACF,CAAC;AAED,IAAI,UAAA,EAAY,KAAK,YAAY;"}